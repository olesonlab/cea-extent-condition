{"title":"Data Processing","markdown":{"yaml":{"title":"Data Processing","author":[{"name":"Louis Chua"},{"name":"Dr. Kirsten Oleson"},{"name":"Alemarie Ceria"},{"name":"Elanur Ural"}],"date":"03/20/2024","format":{"html":{"code-overflow":"wrap"}}},"headingText":"Desired Output(s)","containsRefs":false,"markdown":"\n\n\nQuarto website or Shiny Dashboard of extents and conditions of each island by moku\n\n*Current Focus*: Oʻahu Extents and Conditions\n\n## Helper Functions\n\n::: {.panel-tabset}\n\n### Data Importation\n\n```{r}\n#| label: import-data-from-google-sheets-function\n#| code-fold: true\n#| code-summary: \"Function to Import Extents and Conditions Data from Google Sheets\"\nimport_mhi_extents_and_conditions_gs <- function(url_str) {\n  imported_sheets <- gs4_get(url_str) %>%\n    pluck(\"sheets\")\n\n  sheet_names_lower <- tolower(imported_sheets$name)\n\n  sheets_data <- purrr::map(imported_sheets$name, ~ {\n    Sys.sleep(2) \n    read_sheet(url_str, sheet = .x)\n  })\n\n  names(sheets_data) <- sheet_names_lower\n\n  return(sheets_data)\n}\n```\n\n```{r}\n#| label: get-up-to-date-mhi-data-function\n#| code-fold: true\n#| code-summary: \"Function to Get Up-To-Date MHI Data\"\nget_up_to_date_mhi_data <- function(extents_path, conditions_path) {\n  mhi_extents_dfs <- import_mhi_extents_and_conditions_gs(extents_path)\n\n  mhi_conditions_dfs <- import_mhi_extents_and_conditions_gs(conditions_path)\n  \n  mhi_dfs <- list(\n    conditions = mhi_conditions_dfs,\n    extents = mhi_extents_dfs\n    )\n  \n  return(mhi_dfs)\n}\n```\n\n```{r}\n#| label: export-up-to-date-mhi-data-function\n#| code-fold: true\n#| code-summary: \"Function to Export Up-To-Date MHI Data\"\nexport_mhi_data_to_rdata <- function(mhi_dfs, export_dir_path) {\n  current_date <- format(Sys.Date(), \"%Y-%m-%d\")\n  save(mhi_dfs, file = paste0(export_dir_path, current_date, \"_mhi-extents-conditions-dfs.RData\"))\n}\n```\n\n```{r}\n#| label: subset-mhi-dfs-function\n#| code-fold: true\n#| code-summary: \"Function to Subset Main Hawaiian Islands (MHI) Dataframes\"\nsubset_mhi_dfs <- function(mhi_dfs, subset, island_str = NULL, moku_str = NULL, extent_str = NULL) {\n  if (!subset %in% c(\"conditions\", \"extents\")) {\n    stop(\"Subset must be either 'conditions' or 'extents'\")\n  }\n  \n  dfs <- mhi_dfs[[subset]]\n  \n  filtered_dfs <- list()\n  \n  for (name in names(dfs)) {\n    df <- dfs[[name]]\n    \n    conditions_met <- c(\n      is.null(island_str) || grepl(island_str, name, ignore.case = TRUE),\n      is.null(moku_str) || grepl(moku_str, name, ignore.case = TRUE),\n      is.null(extent_str) || grepl(extent_str, name, ignore.case = TRUE)\n    )\n    \n    if (all(conditions_met)) {\n      filtered_dfs[[name]] <- df\n    }\n  }\n  \n  return(filtered_dfs)\n}\n```\n\n### Data Cleaning and Preparation\n\n```{r}\n#| label: set-temp-column-names-function\n#| code-fold: true\n#| code-summary: \"Function to Set Temporary Column Names\"\nset_temp_column_names <- function(df) {\n  df <- rbind(colnames(df), df)\n  \n  colnames(df) <- paste(\"temp\", seq_len(ncol(df)), sep = \"_\")\n  \n  return(df)\n}\n```\n\n```{r}\n#| label: create-keyword-search-columns \n#| code-fold: true\n#| code-summary: \"Function to Create New Columns Based on Keyword Searches\"\ncreate_keyword_search_columns <- function(df, conditions) {\n  reduce(conditions, function(df, cond) {\n    df %>%\n      mutate(across(everything(), as.character)) %>%\n      mutate(\n        !!sym(cond$new_col_name) := if_else(\n          rowSums(select(., -matches(cond$target_col_name)) == cond$keyword, na.rm = TRUE) > 0,\n          .[[cond$target_col_name]],\n          NA_character_\n        )\n      )\n  }, .init = df)\n}\n```\n\n```{r}\n#| label: fill-cols-down-function\n#| code-fold: true\n#| code-summary: \"Function to Efficiently Fill Columns\"\nfill_cols_down <- function(df, cols) {\n  df %>%\n    tidyr::fill(!!!syms(cols), .direction = \"down\")\n}\n```\n\n```{r}\n#| label: relocate-cols-function \n#| code-fold: true\n#| code-summary: \"Function to Relocate Columns to the Front of a Dataframe\"\nrelocate_cols <- function(df, col_names, before_col) {\n  existing_col_names <- col_names[col_names %in% names(df)]\n  if (before_col %in% names(df)) {\n    df %>% \n      relocate(all_of(existing_col_names), .before = all_of(before_col))\n  } else {\n    warning(\"The specified 'before_col' does not exist in the dataframe. Relocating to the beginning.\")\n    df %>% \n      relocate(all_of(existing_col_names))\n  }\n}\n```\n\n```{r}\n#| label: remove-undesired-values-function\n#| code-fold: true\n#| code-summary: \"Function to Remove Undesired Values\"\nremove_undesired_vals <- function(df) {\n  df %>% \n    slice(-1) %>% \n    filter(!(is.na(temp_1) & is.na(temp_2))) %>% \n    select(where(~ !all(is.na(.)))) \n}\n```\n\n```{r}\n#| label: create-column-from-regex-function\n#| code-fold: true\n#| code-summary: \"Function to Create New Columns Based on Regular Expressions\"\ncreate_column_from_regex <- function(df, source_column, new_column, regex_pattern) {\n  df %>% \n    mutate(!!new_column := str_extract(!!sym(source_column), regex_pattern)) %>% \n    select(-source_column)\n}\n```\n\n```{r}\n#| label: separate-columns-functions\n#| code-fold: true\n#| code-summary: \"Function to Separate Columns\"\nseparate_columns <- function(df, specifications) {\n  reduce(specifications, function(df, spec) {\n    df %>% \n      separate(\n        !!spec$source_column,\n        into = spec$into,\n        sep = spec$sep,\n        convert = spec$convert\n      ) %>%\n      mutate(across(all_of(spec$into), str_trim))\n  }, .init = df)\n}\n```\n\n```{r}\n#| label: tidy-oahu-conditions-data-function\n#| code-fold: true\n#| code-summary: \"Function to Tidy Oʻahu Conditions Data\"\ntidy_conditions_data <- function(df, keyword_searches, col_names, cols_to_sep) {\n  df %>%\n    set_temp_column_names() %>%\n    dplyr::select(c(1:11)) %>% \n    create_keyword_search_columns(keyword_searches) %>%\n      fill_cols_down(c(\"island\", \"moku\", \"ecosystem_type\")) %>% \n      relocate_cols(., c(\"island\", \"moku\", \"ecosystem_type\"), \"temp_1\") %>% \n      remove_undesired_vals() %>% \n      set_names(col_names) %>% \n      filter(!(descriptor %in% c(\"Indicators\", \"Descriptor\")) & \n           !grepl(\"\\\\*\", typology_class) & \n           !grepl(\"\\\\^\", typology_class)) %>% \n      pivot_longer(., cols = c(7:14), names_to = \"categories\", values_to = \"value\"\n      ) %>% \n      separate_columns(cols_to_sep) %>% \n      fill_cols_down(., c(\"class_code\", \"typology\", \"unit\")) %>% \n      mutate(\n        class_code = str_remove(class_code, \"^\\\\(Class \"),\n        measurement = if_else(is.na(measurement), \"Actively Managed or Conserved\", measurement),\n        island = gsub(\"Oahu\", \"Oʻahu\", island),\n        moku = gsub(\"Ewa\", \"ʻEwa\", moku)\n        ) %>% \n      mutate(\n        across(where(is.character), str_trim), \n        across(where(is.character), \n               ~gsub(\"/\\\\s+\", \"/\", .)), \n        across(c(1:9), as.factor), \n        unit = if_else(descriptor == \"Rugosity (predicted)\", \"-\", unit),\n        category = if_else(ecosystem_type == \"Beaches/Dunes\" & category == \"Actively Managed or Conserved\", \"Reference Extent Publicly Owned\", category),\n        measurement = if_else(ecosystem_type == \"Beaches/Dunes\" & category == \"Reference Extent Publicly Owned\", \"Reference Extent Publicly Owned\", measurement)\n      ) %>% \n      filter(measurement != \"Change in Indicator\") %>% \n    mutate(value = strsplit(value, \",\")) %>%\n    unnest(value)\n}\n```\n\n### Data Exportation\n\n```{r}\n#| label: export-tidied-dfs-to-csv-function\n#| code-fold: true\n#| code-summary: \"Function to Export Tidied Dataframes to CSV\"\nexport_tidied_dfs_to_csv <- function(df, desc_name, dir_path = \"data/tidied/\") {\n  if (!dir.exists(dir_path)) {\n    dir.create(dir_path, recursive = TRUE)\n  }\n  \n  file_path <- paste0(dir_path,\n                      format(Sys.Date(), \"%Y-%m-%d\"),\n                      \"_tidied-\", desc_name, \".csv\")\n  \n  write.csv(df, file_path, row.names = FALSE)\n  \n  message(\"File saved to: \", file_path)\n}\n```\n\n:::\n\n## Data Importation\n\n### Data Sources\n\n### Procedure\n\n```{r}\n#| label: install-packages-and-load-libraries\n#| code-fold: true\n#| code-summary: \"Install Packages and Load Libraries\"\nif (!requireNamespace(\"pacman\", quietly = TRUE)) {\n  install.packages(\"pacman\")\n}\n\npacman::p_load(fs, renv, yaml, rmarkdown, sf, leaflet, mapview, htmlwidgets,\n               janitor, tidyverse, googlesheets4, terra, lwgeom,\n               viridis, stars, markdown)\n\n# install.packages(\"devtools\")\n# devtools::install_github(\"agstn/dataxray\")\nlibrary(dataxray)\n```\n\n```{r}\n#| label: configs\n#| code-fold: true\n#| code-summary: \"Configurations\"\ngs_urls <- yaml::read_yaml(\"code/gs_urls.yml\")\n```\n\n```{r}\n#| label: authenticate-google-account\n#| code-fold: true\n#| code-summary: \"Authenticate Google account\"\n#| eval: false\ngs4_auth()\n```\n\n::: {.panel-tabset}\n\n#### General\n\n```{r}\n#| label: slowly-import-data-from-google-sheets\n#| code-fold: true\n#| code-summary: \"Import Extents and Conditions Data from Google Sheets for MHI\"\n#| eval: false\nmhi_dfs <- get_up_to_date_mhi_data(\n  gs_urls$extents, \n  gs_urls$conditions\n)\n```\n\n```{r}\n#| label: export-up-tp-date-mhi-dfs\n#| code-fold: true\n#| code-summary: \"Export Up-to-Date MHI Dataframes\"\n#| eval: false\nexport_mhi_data_to_rdata(mhi_dfs, \"data/raw/\")\n```\n\n```{r}\n#| label: efficiently-load-updated-mhi-extents-and-conditions-data\n#| code-fold: true\n#| code-summary: \"Efficiently load extents and conditions data for MHI\"\nraw_data_paths <- fs::dir_ls(\"data/raw\")\n\n# for (i in seq_along(raw_data_paths)) {\n#     cat(i, \"=\", raw_data_paths[i], \"\\n\")\n# }\n\nbase::load(raw_data_paths[2])\n```\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"List of MHI Dataframes\"\nnames(mhi_dfs$extents)\nnames(mhi_dfs$conditions)\n```\n\n#### Specific\n\n```{r}\n#| label: import-oahu-extents-and-conditions-dat\n#| code-fold: true\n#| code-summary: \"Subset MHI Dataframes\"\noahu_extents_dfs <- subset_mhi_dfs(\n  mhi_dfs, subset = \"extents\", island_str = \"oahu\"\n  )\n\noahu_conditions_dfs <- subset_mhi_dfs(\n  mhi_dfs, subset = \"conditions\", island_str = \"oahu\"\n  )\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"List of Oʻahu Dataframes\"\nnames(oahu_extents_dfs)\nnames(oahu_conditions_dfs)\n```\n\n:::\n\n## Data Cleaning and Preparation\n\n### Tidying and Merging Raw Datasets\n\n::: {.panel-tabset}\n\n#### Extents\n\n##### Marine\n\n```{r}\n#| label: tidy-oahu-extents-data\n#| code-fold: true\n#| code-summary: \"Tidy Oʻahu Marine Extents Data\"\n#| eval: false\noahu_extents_keyword_searches <- list(\n  list(keyword = \"ISLAND\", target_col_name = \"temp_1\", new_col_name = \"island\"),\n  list(keyword = \"MOKU\", target_col_name = \"temp_1\", new_col_name = \"moku\")\n)\n\ntidied_oahu_marine_extents_df <- oahu_extents_dfs$marine_oahu %>%\n  set_temp_column_names() %>%\n  create_keyword_search_columns(oahu_extents_keyword_searches) %>%\n  fill_cols_down(c(\"island\", \"moku\")) %>% \n  relocate_cols(., c(\"island\", \"moku\"), \"temp_1\") \n  \n  \n  \n  select(1, 2, 8:13) %>% \n  set_names(new_marine_extent_names) %>%\n  mutate(island = \"Oʻahu\") %>%\n  fill(moku, .direction = \"down\") %>%\n  mutate(\n    moku = case_when(\n      lag(island) == \"MOKU\" ~ moku,\n      TRUE ~ moku\n    )\n  ) %>% \n  filter(temp1 %in% c(\"Area (km2)\", \"Opening Stock (2004-2014)\")) %>%\n  pivot_longer(\n    cols = c(4:8),\n    names_to = \"temp\",\n    values_to = \"habitat\"\n  ) %>% \n  select(-c(3, 4)) %>% \n  mutate(\n    opening_stock = if_else(grepl(\"^\\\\d+(\\\\.\\\\d+)?$|^-$\", habitat), as.character(habitat), NA_character_),\n    opening_stock = if_else(opening_stock == \"-\", \"0\", opening_stock),\n    opening_stock = as.numeric(opening_stock)\n  ) %>% \n  mutate(row = row_number()) %>%\n  # Create a grouping variable for habitats and their corresponding stock values\n  group_by(island, moku) %>%\n  mutate(group = cumsum(habitat %in% c(\"Soft Bottom\", \"Other Hard Bottom\", \"Rock/ Boulder\", \"Pavement\", \"Coral Dominated Hard Bottom\") | row == 1)) %>%\n  # Shift opening_stock values up within each group\n  mutate(opening_stock = if_else(group > 1 & !is.na(opening_stock), opening_stock, lead(opening_stock, n = 5))) %>%\n  ungroup() %>%\n  # Filter out the stock value rows, leaving only habitat rows\n  filter(habitat %in% c(\"Soft Bottom\", \"Other Hard Bottom\", \"Rock/ Boulder\", \"Pavement\", \"Coral Dominated Hard Bottom\")) %>%\n  select(-row, -group) %>% \n  mutate(\n    across(c(island, moku), as.factor),\n    habitat = as.factor(map_chr(habitat, ~ .x[1]))\n    ) %>% \n  # filter(habitat != \"Other Hard Bottom\") %>% \n  mutate(habitat = if_else(habitat == \"Rock/ Boulder\", \"Rock/Boulder\", habitat))\n\npaged_table(tidied_oahu_marine_extents_df)\n```\n<br>\n\n##### Terrestrial\n\n```{r}\n#| eval: false\n#| code-fold: true\n#| code-summary: \"Tidy Oʻahu Terrestrial Extents Data\"\nnew_terrestrial_extent_names <- c(\"island\", \"moku\", \"habitat\")\ntidied_oahu_terrestrial_extent_df <- oahu_extents_dfs$terrestrial_oahu %>% \n  mutate(island = \"Oʻahu\",\n         moku = if_else(TERRESTRIAL == \"MOKU\", ...2, NA_character_)) %>% \n  fill(c(island, moku), .direction = \"down\") %>% \n  slice(-c(1:30)) %>% \n  select(-c(1, 12:15))\n```\n\n#### Conditions\n\n```{r}\n#| label: tidy-mhi-conditions-data\n#| code-fold: true\n#| code-summary: \"Tidy Oʻahu Conditions Data\"\n#| warning: false\nconditions_keyword_searches <- list(\n  list(keyword = \"ISLAND\", target_col_name = \"temp_5\", new_col_name = \"island\"),\n  list(keyword = \"MOKU\", target_col_name = \"temp_5\", new_col_name = \"moku\"),\n  list(keyword = \"Ecosystem Type\", target_col_name = \"temp_5\", new_col_name = \"ecosystem_type\")\n)\n\nrename_conditions_cols <- c(\"island\", \"moku\", \"ecosystem_type\", \"typology_class\",\n                        \"descriptor\", \"unit\", \"Variable Values: Opening Value\",\n                        \"Variable Values: Closing Value\", \n                        \"Actively Managed or Conserved\", \n                        \"Reference Level Values: Upper Level\",\n                        \"Reference Level Values: Lower Level\",\n                        \"Indicator Values (Rescaled): Opening Value\",\n                        \"Indicator Values (Rescaled): Closing Value\",\n                        \"Indicator Values (Rescaled): Change in Indicator\")\n\nconditions_cols_to_sep <- list(\n  list(source_column = \"categories\", into = c(\"category\", \"measurement\"), sep = \": \", convert = TRUE\n  ),\n  list(source_column = \"typology_class\", into = c(\"class_code\", \"typology\"), sep = \"\\\\) \", convert = TRUE\n  )\n)\n\nmhi_dfs$conditions <- mhi_dfs$conditions %>%\n  .[-grep(\"^clean_\", names(.))]\n\ntidied_mhi_conditions_df <- map_dfr(mhi_dfs$conditions, ~ tidy_conditions_data(\n  df = .x, \n  keyword_searches = conditions_keyword_searches, \n  col_names = rename_conditions_cols, \n  cols_to_sep = conditions_cols_to_sep\n)) %>%\n  mutate(\n    moku = if_else(moku == \"Ko‘olau\", \"Koʻolau\", moku),\n    moku_name2 = case_when(\n      moku == \"Kona\" & island == \"Hawaiʻi\" ~ \"KONA HAW\",\n      moku == \"Kāʻu\" & island == \"Hawaiʻi\" ~ \"KAU\",\n      moku == \"Puna\" & island == \"Hawaiʻi\" ~ \"PUNA HAW\",\n      moku == \"Hilo\" & island == \"Hawaiʻi\" ~ \"HILO\",\n      moku == \"Hāmākua\" & island == \"Hawaiʻi\" ~ \"HAMAKUA\",\n      moku == \"Kohala\" & island == \"Hawaiʻi\" ~ \"KOHALA\",\n      moku == \"Waiʻanae\" & island == \"Oʻahu\" ~ \"WAIANAE\",\n      moku == \"ʻEwa\" & island == \"Oʻahu\" ~ \"EWA\",\n      moku == \"Kona\" & island == \"Oʻahu\" ~ \"KONA OAH\",\n      moku == \"Koʻolaupoko\" & island == \"Oʻahu\" ~ \"KOOLAUPOKO\",\n      moku == \"Koʻolauloa\" & island == \"Oʻahu\" ~ \"KOOLAULOA\",\n      moku == \"Waialua\" & island == \"Oʻahu\" ~ \"WAIALUA\",\n      moku == \"Mana\" & island == \"Kauaʻi\" ~ \"MANA\",\n      moku == \"Kona\" & island == \"Kauaʻi\" ~ \"KONA KAU\",\n      moku == \"Puna\" & island == \"Kauaʻi\" ~ \"PUNA KAU\",\n      moku == \"Koʻolau\" & island == \"Kauaʻi\" ~ \"KOOLAU KAU\",\n      moku == \"Haleleʻa\" & island == \"Kauaʻi\" ~ \"HALELEA\",\n      moku == \"Nāpali\" & island == \"Kauaʻi\" ~ \"NAPALI\",\n      moku == \"Kona\" & island == \"Kahoʻolawe\" ~ \"KONA KAH\",\n      moku == \"Koʻolau\" & island == \"Kahoʻolawe\" ~ \"KOOLAU KAH\",\n      moku == \"Kona\" & island == \"Lānaʻi\" ~ \"KONA LAN\",\n      moku == \"Koʻolau\" & island == \"Lānaʻi\" ~ \"KOOLAU LAN\",\n      moku == \"Kualuakoʻi\" & island == \"Molokaʻi\" ~ \"KALUAKOI\",\n      moku == \"Pālāʻau\" & island == \"Molokaʻi\" ~ \"PALAAU\",\n      moku == \"Kona\" & island == \"Molokaʻi\" ~ \"KONA MOL\",\n      moku == \"Hālawa\" & island == \"Molokaʻi\" ~ \"HALAWA\",\n      moku == \"Koʻolau\" & island == \"Molokaʻi\" ~ \"KOOLAU MOL\",\n      moku == \"Lāhainā\" & island == \"Maui\" ~ \"LAHAINA\",\n      moku == \"Kealaloloa\" & island == \"Maui\" ~ \"KEALALOLOA\",\n      moku == \"Kula\" & island == \"Maui\" ~ \"KULA\",\n      moku == \"Honuaʻula\" & island == \"Maui\" ~ \"HONUAULA\",\n      moku == \"Kahikinui\" & island == \"Maui\" ~ \"KAHIKINUI\",\n      moku == \"Kaupo\" & island == \"Maui\" ~ \"KAUPO\",\n      moku == \"Kīpahulu\" & island == \"Maui\" ~ \"KIPAHULU\",\n      moku == \"Hāna\" & island == \"Maui\" ~ \"HANA\",\n      moku == \"Koʻolau\" & island == \"Maui\" ~ \"KOOLAU MAU\",\n      moku == \"Hāmākualoa\" & island == \"Maui\" ~ \"HAMAKUALOA\",\n      moku == \"Hāmākuapoko\" & island == \"Maui\" ~ \"HAMAKUAPOKO\",\n      moku == \"Wailuku\" & island == \"Maui\" ~ \"WAILUKU\",\n      moku == \"Kāʻanapali\" & island == \"Maui\" ~ \"KAANAPALI\"\n    )\n  ) %>% \n  relocate(moku_name2, .after = moku)\n\npaged_table(tidied_mhi_conditions_df)\n```\n\n:::\n\n## Data Exportation\n\n### Exporting Processed Data\n\n```{r}\n#| label: export-tidied-dfs-to-csv\n#| code-fold: true\n#| code-summary: \"Export Processed Data\"\n#| eval: false\ntidied_dfs_list <- list(\n  list(df = tidied_mhi_conditions_df, desc_name = \"mhi-conditions\")\n#   list(df = tidied_oahu_marine_extents_df, desc_name = \"oahu-marine-extents\")\n)\n\nmap(tidied_dfs_list, ~export_tidied_dfs_to_csv(.x$df, .x$desc_name))\n```\n\n### Generating Data Dictionaries\n\n```{r}\n#| code-fold: true\n#| code-summary: \"MHI Marine Condition Accounts Data Dictionary\"\ntidied_mhi_conditions_df %>%\n  make_xray() %>% \n  view_xray()\n```\n","srcMarkdownNoYaml":"\n\n## Desired Output(s)\n\nQuarto website or Shiny Dashboard of extents and conditions of each island by moku\n\n*Current Focus*: Oʻahu Extents and Conditions\n\n## Helper Functions\n\n::: {.panel-tabset}\n\n### Data Importation\n\n```{r}\n#| label: import-data-from-google-sheets-function\n#| code-fold: true\n#| code-summary: \"Function to Import Extents and Conditions Data from Google Sheets\"\nimport_mhi_extents_and_conditions_gs <- function(url_str) {\n  imported_sheets <- gs4_get(url_str) %>%\n    pluck(\"sheets\")\n\n  sheet_names_lower <- tolower(imported_sheets$name)\n\n  sheets_data <- purrr::map(imported_sheets$name, ~ {\n    Sys.sleep(2) \n    read_sheet(url_str, sheet = .x)\n  })\n\n  names(sheets_data) <- sheet_names_lower\n\n  return(sheets_data)\n}\n```\n\n```{r}\n#| label: get-up-to-date-mhi-data-function\n#| code-fold: true\n#| code-summary: \"Function to Get Up-To-Date MHI Data\"\nget_up_to_date_mhi_data <- function(extents_path, conditions_path) {\n  mhi_extents_dfs <- import_mhi_extents_and_conditions_gs(extents_path)\n\n  mhi_conditions_dfs <- import_mhi_extents_and_conditions_gs(conditions_path)\n  \n  mhi_dfs <- list(\n    conditions = mhi_conditions_dfs,\n    extents = mhi_extents_dfs\n    )\n  \n  return(mhi_dfs)\n}\n```\n\n```{r}\n#| label: export-up-to-date-mhi-data-function\n#| code-fold: true\n#| code-summary: \"Function to Export Up-To-Date MHI Data\"\nexport_mhi_data_to_rdata <- function(mhi_dfs, export_dir_path) {\n  current_date <- format(Sys.Date(), \"%Y-%m-%d\")\n  save(mhi_dfs, file = paste0(export_dir_path, current_date, \"_mhi-extents-conditions-dfs.RData\"))\n}\n```\n\n```{r}\n#| label: subset-mhi-dfs-function\n#| code-fold: true\n#| code-summary: \"Function to Subset Main Hawaiian Islands (MHI) Dataframes\"\nsubset_mhi_dfs <- function(mhi_dfs, subset, island_str = NULL, moku_str = NULL, extent_str = NULL) {\n  if (!subset %in% c(\"conditions\", \"extents\")) {\n    stop(\"Subset must be either 'conditions' or 'extents'\")\n  }\n  \n  dfs <- mhi_dfs[[subset]]\n  \n  filtered_dfs <- list()\n  \n  for (name in names(dfs)) {\n    df <- dfs[[name]]\n    \n    conditions_met <- c(\n      is.null(island_str) || grepl(island_str, name, ignore.case = TRUE),\n      is.null(moku_str) || grepl(moku_str, name, ignore.case = TRUE),\n      is.null(extent_str) || grepl(extent_str, name, ignore.case = TRUE)\n    )\n    \n    if (all(conditions_met)) {\n      filtered_dfs[[name]] <- df\n    }\n  }\n  \n  return(filtered_dfs)\n}\n```\n\n### Data Cleaning and Preparation\n\n```{r}\n#| label: set-temp-column-names-function\n#| code-fold: true\n#| code-summary: \"Function to Set Temporary Column Names\"\nset_temp_column_names <- function(df) {\n  df <- rbind(colnames(df), df)\n  \n  colnames(df) <- paste(\"temp\", seq_len(ncol(df)), sep = \"_\")\n  \n  return(df)\n}\n```\n\n```{r}\n#| label: create-keyword-search-columns \n#| code-fold: true\n#| code-summary: \"Function to Create New Columns Based on Keyword Searches\"\ncreate_keyword_search_columns <- function(df, conditions) {\n  reduce(conditions, function(df, cond) {\n    df %>%\n      mutate(across(everything(), as.character)) %>%\n      mutate(\n        !!sym(cond$new_col_name) := if_else(\n          rowSums(select(., -matches(cond$target_col_name)) == cond$keyword, na.rm = TRUE) > 0,\n          .[[cond$target_col_name]],\n          NA_character_\n        )\n      )\n  }, .init = df)\n}\n```\n\n```{r}\n#| label: fill-cols-down-function\n#| code-fold: true\n#| code-summary: \"Function to Efficiently Fill Columns\"\nfill_cols_down <- function(df, cols) {\n  df %>%\n    tidyr::fill(!!!syms(cols), .direction = \"down\")\n}\n```\n\n```{r}\n#| label: relocate-cols-function \n#| code-fold: true\n#| code-summary: \"Function to Relocate Columns to the Front of a Dataframe\"\nrelocate_cols <- function(df, col_names, before_col) {\n  existing_col_names <- col_names[col_names %in% names(df)]\n  if (before_col %in% names(df)) {\n    df %>% \n      relocate(all_of(existing_col_names), .before = all_of(before_col))\n  } else {\n    warning(\"The specified 'before_col' does not exist in the dataframe. Relocating to the beginning.\")\n    df %>% \n      relocate(all_of(existing_col_names))\n  }\n}\n```\n\n```{r}\n#| label: remove-undesired-values-function\n#| code-fold: true\n#| code-summary: \"Function to Remove Undesired Values\"\nremove_undesired_vals <- function(df) {\n  df %>% \n    slice(-1) %>% \n    filter(!(is.na(temp_1) & is.na(temp_2))) %>% \n    select(where(~ !all(is.na(.)))) \n}\n```\n\n```{r}\n#| label: create-column-from-regex-function\n#| code-fold: true\n#| code-summary: \"Function to Create New Columns Based on Regular Expressions\"\ncreate_column_from_regex <- function(df, source_column, new_column, regex_pattern) {\n  df %>% \n    mutate(!!new_column := str_extract(!!sym(source_column), regex_pattern)) %>% \n    select(-source_column)\n}\n```\n\n```{r}\n#| label: separate-columns-functions\n#| code-fold: true\n#| code-summary: \"Function to Separate Columns\"\nseparate_columns <- function(df, specifications) {\n  reduce(specifications, function(df, spec) {\n    df %>% \n      separate(\n        !!spec$source_column,\n        into = spec$into,\n        sep = spec$sep,\n        convert = spec$convert\n      ) %>%\n      mutate(across(all_of(spec$into), str_trim))\n  }, .init = df)\n}\n```\n\n```{r}\n#| label: tidy-oahu-conditions-data-function\n#| code-fold: true\n#| code-summary: \"Function to Tidy Oʻahu Conditions Data\"\ntidy_conditions_data <- function(df, keyword_searches, col_names, cols_to_sep) {\n  df %>%\n    set_temp_column_names() %>%\n    dplyr::select(c(1:11)) %>% \n    create_keyword_search_columns(keyword_searches) %>%\n      fill_cols_down(c(\"island\", \"moku\", \"ecosystem_type\")) %>% \n      relocate_cols(., c(\"island\", \"moku\", \"ecosystem_type\"), \"temp_1\") %>% \n      remove_undesired_vals() %>% \n      set_names(col_names) %>% \n      filter(!(descriptor %in% c(\"Indicators\", \"Descriptor\")) & \n           !grepl(\"\\\\*\", typology_class) & \n           !grepl(\"\\\\^\", typology_class)) %>% \n      pivot_longer(., cols = c(7:14), names_to = \"categories\", values_to = \"value\"\n      ) %>% \n      separate_columns(cols_to_sep) %>% \n      fill_cols_down(., c(\"class_code\", \"typology\", \"unit\")) %>% \n      mutate(\n        class_code = str_remove(class_code, \"^\\\\(Class \"),\n        measurement = if_else(is.na(measurement), \"Actively Managed or Conserved\", measurement),\n        island = gsub(\"Oahu\", \"Oʻahu\", island),\n        moku = gsub(\"Ewa\", \"ʻEwa\", moku)\n        ) %>% \n      mutate(\n        across(where(is.character), str_trim), \n        across(where(is.character), \n               ~gsub(\"/\\\\s+\", \"/\", .)), \n        across(c(1:9), as.factor), \n        unit = if_else(descriptor == \"Rugosity (predicted)\", \"-\", unit),\n        category = if_else(ecosystem_type == \"Beaches/Dunes\" & category == \"Actively Managed or Conserved\", \"Reference Extent Publicly Owned\", category),\n        measurement = if_else(ecosystem_type == \"Beaches/Dunes\" & category == \"Reference Extent Publicly Owned\", \"Reference Extent Publicly Owned\", measurement)\n      ) %>% \n      filter(measurement != \"Change in Indicator\") %>% \n    mutate(value = strsplit(value, \",\")) %>%\n    unnest(value)\n}\n```\n\n### Data Exportation\n\n```{r}\n#| label: export-tidied-dfs-to-csv-function\n#| code-fold: true\n#| code-summary: \"Function to Export Tidied Dataframes to CSV\"\nexport_tidied_dfs_to_csv <- function(df, desc_name, dir_path = \"data/tidied/\") {\n  if (!dir.exists(dir_path)) {\n    dir.create(dir_path, recursive = TRUE)\n  }\n  \n  file_path <- paste0(dir_path,\n                      format(Sys.Date(), \"%Y-%m-%d\"),\n                      \"_tidied-\", desc_name, \".csv\")\n  \n  write.csv(df, file_path, row.names = FALSE)\n  \n  message(\"File saved to: \", file_path)\n}\n```\n\n:::\n\n## Data Importation\n\n### Data Sources\n\n### Procedure\n\n```{r}\n#| label: install-packages-and-load-libraries\n#| code-fold: true\n#| code-summary: \"Install Packages and Load Libraries\"\nif (!requireNamespace(\"pacman\", quietly = TRUE)) {\n  install.packages(\"pacman\")\n}\n\npacman::p_load(fs, renv, yaml, rmarkdown, sf, leaflet, mapview, htmlwidgets,\n               janitor, tidyverse, googlesheets4, terra, lwgeom,\n               viridis, stars, markdown)\n\n# install.packages(\"devtools\")\n# devtools::install_github(\"agstn/dataxray\")\nlibrary(dataxray)\n```\n\n```{r}\n#| label: configs\n#| code-fold: true\n#| code-summary: \"Configurations\"\ngs_urls <- yaml::read_yaml(\"code/gs_urls.yml\")\n```\n\n```{r}\n#| label: authenticate-google-account\n#| code-fold: true\n#| code-summary: \"Authenticate Google account\"\n#| eval: false\ngs4_auth()\n```\n\n::: {.panel-tabset}\n\n#### General\n\n```{r}\n#| label: slowly-import-data-from-google-sheets\n#| code-fold: true\n#| code-summary: \"Import Extents and Conditions Data from Google Sheets for MHI\"\n#| eval: false\nmhi_dfs <- get_up_to_date_mhi_data(\n  gs_urls$extents, \n  gs_urls$conditions\n)\n```\n\n```{r}\n#| label: export-up-tp-date-mhi-dfs\n#| code-fold: true\n#| code-summary: \"Export Up-to-Date MHI Dataframes\"\n#| eval: false\nexport_mhi_data_to_rdata(mhi_dfs, \"data/raw/\")\n```\n\n```{r}\n#| label: efficiently-load-updated-mhi-extents-and-conditions-data\n#| code-fold: true\n#| code-summary: \"Efficiently load extents and conditions data for MHI\"\nraw_data_paths <- fs::dir_ls(\"data/raw\")\n\n# for (i in seq_along(raw_data_paths)) {\n#     cat(i, \"=\", raw_data_paths[i], \"\\n\")\n# }\n\nbase::load(raw_data_paths[2])\n```\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"List of MHI Dataframes\"\nnames(mhi_dfs$extents)\nnames(mhi_dfs$conditions)\n```\n\n#### Specific\n\n```{r}\n#| label: import-oahu-extents-and-conditions-dat\n#| code-fold: true\n#| code-summary: \"Subset MHI Dataframes\"\noahu_extents_dfs <- subset_mhi_dfs(\n  mhi_dfs, subset = \"extents\", island_str = \"oahu\"\n  )\n\noahu_conditions_dfs <- subset_mhi_dfs(\n  mhi_dfs, subset = \"conditions\", island_str = \"oahu\"\n  )\n```\n\n```{r}\n#| code-fold: true\n#| code-summary: \"List of Oʻahu Dataframes\"\nnames(oahu_extents_dfs)\nnames(oahu_conditions_dfs)\n```\n\n:::\n\n## Data Cleaning and Preparation\n\n### Tidying and Merging Raw Datasets\n\n::: {.panel-tabset}\n\n#### Extents\n\n##### Marine\n\n```{r}\n#| label: tidy-oahu-extents-data\n#| code-fold: true\n#| code-summary: \"Tidy Oʻahu Marine Extents Data\"\n#| eval: false\noahu_extents_keyword_searches <- list(\n  list(keyword = \"ISLAND\", target_col_name = \"temp_1\", new_col_name = \"island\"),\n  list(keyword = \"MOKU\", target_col_name = \"temp_1\", new_col_name = \"moku\")\n)\n\ntidied_oahu_marine_extents_df <- oahu_extents_dfs$marine_oahu %>%\n  set_temp_column_names() %>%\n  create_keyword_search_columns(oahu_extents_keyword_searches) %>%\n  fill_cols_down(c(\"island\", \"moku\")) %>% \n  relocate_cols(., c(\"island\", \"moku\"), \"temp_1\") \n  \n  \n  \n  select(1, 2, 8:13) %>% \n  set_names(new_marine_extent_names) %>%\n  mutate(island = \"Oʻahu\") %>%\n  fill(moku, .direction = \"down\") %>%\n  mutate(\n    moku = case_when(\n      lag(island) == \"MOKU\" ~ moku,\n      TRUE ~ moku\n    )\n  ) %>% \n  filter(temp1 %in% c(\"Area (km2)\", \"Opening Stock (2004-2014)\")) %>%\n  pivot_longer(\n    cols = c(4:8),\n    names_to = \"temp\",\n    values_to = \"habitat\"\n  ) %>% \n  select(-c(3, 4)) %>% \n  mutate(\n    opening_stock = if_else(grepl(\"^\\\\d+(\\\\.\\\\d+)?$|^-$\", habitat), as.character(habitat), NA_character_),\n    opening_stock = if_else(opening_stock == \"-\", \"0\", opening_stock),\n    opening_stock = as.numeric(opening_stock)\n  ) %>% \n  mutate(row = row_number()) %>%\n  # Create a grouping variable for habitats and their corresponding stock values\n  group_by(island, moku) %>%\n  mutate(group = cumsum(habitat %in% c(\"Soft Bottom\", \"Other Hard Bottom\", \"Rock/ Boulder\", \"Pavement\", \"Coral Dominated Hard Bottom\") | row == 1)) %>%\n  # Shift opening_stock values up within each group\n  mutate(opening_stock = if_else(group > 1 & !is.na(opening_stock), opening_stock, lead(opening_stock, n = 5))) %>%\n  ungroup() %>%\n  # Filter out the stock value rows, leaving only habitat rows\n  filter(habitat %in% c(\"Soft Bottom\", \"Other Hard Bottom\", \"Rock/ Boulder\", \"Pavement\", \"Coral Dominated Hard Bottom\")) %>%\n  select(-row, -group) %>% \n  mutate(\n    across(c(island, moku), as.factor),\n    habitat = as.factor(map_chr(habitat, ~ .x[1]))\n    ) %>% \n  # filter(habitat != \"Other Hard Bottom\") %>% \n  mutate(habitat = if_else(habitat == \"Rock/ Boulder\", \"Rock/Boulder\", habitat))\n\npaged_table(tidied_oahu_marine_extents_df)\n```\n<br>\n\n##### Terrestrial\n\n```{r}\n#| eval: false\n#| code-fold: true\n#| code-summary: \"Tidy Oʻahu Terrestrial Extents Data\"\nnew_terrestrial_extent_names <- c(\"island\", \"moku\", \"habitat\")\ntidied_oahu_terrestrial_extent_df <- oahu_extents_dfs$terrestrial_oahu %>% \n  mutate(island = \"Oʻahu\",\n         moku = if_else(TERRESTRIAL == \"MOKU\", ...2, NA_character_)) %>% \n  fill(c(island, moku), .direction = \"down\") %>% \n  slice(-c(1:30)) %>% \n  select(-c(1, 12:15))\n```\n\n#### Conditions\n\n```{r}\n#| label: tidy-mhi-conditions-data\n#| code-fold: true\n#| code-summary: \"Tidy Oʻahu Conditions Data\"\n#| warning: false\nconditions_keyword_searches <- list(\n  list(keyword = \"ISLAND\", target_col_name = \"temp_5\", new_col_name = \"island\"),\n  list(keyword = \"MOKU\", target_col_name = \"temp_5\", new_col_name = \"moku\"),\n  list(keyword = \"Ecosystem Type\", target_col_name = \"temp_5\", new_col_name = \"ecosystem_type\")\n)\n\nrename_conditions_cols <- c(\"island\", \"moku\", \"ecosystem_type\", \"typology_class\",\n                        \"descriptor\", \"unit\", \"Variable Values: Opening Value\",\n                        \"Variable Values: Closing Value\", \n                        \"Actively Managed or Conserved\", \n                        \"Reference Level Values: Upper Level\",\n                        \"Reference Level Values: Lower Level\",\n                        \"Indicator Values (Rescaled): Opening Value\",\n                        \"Indicator Values (Rescaled): Closing Value\",\n                        \"Indicator Values (Rescaled): Change in Indicator\")\n\nconditions_cols_to_sep <- list(\n  list(source_column = \"categories\", into = c(\"category\", \"measurement\"), sep = \": \", convert = TRUE\n  ),\n  list(source_column = \"typology_class\", into = c(\"class_code\", \"typology\"), sep = \"\\\\) \", convert = TRUE\n  )\n)\n\nmhi_dfs$conditions <- mhi_dfs$conditions %>%\n  .[-grep(\"^clean_\", names(.))]\n\ntidied_mhi_conditions_df <- map_dfr(mhi_dfs$conditions, ~ tidy_conditions_data(\n  df = .x, \n  keyword_searches = conditions_keyword_searches, \n  col_names = rename_conditions_cols, \n  cols_to_sep = conditions_cols_to_sep\n)) %>%\n  mutate(\n    moku = if_else(moku == \"Ko‘olau\", \"Koʻolau\", moku),\n    moku_name2 = case_when(\n      moku == \"Kona\" & island == \"Hawaiʻi\" ~ \"KONA HAW\",\n      moku == \"Kāʻu\" & island == \"Hawaiʻi\" ~ \"KAU\",\n      moku == \"Puna\" & island == \"Hawaiʻi\" ~ \"PUNA HAW\",\n      moku == \"Hilo\" & island == \"Hawaiʻi\" ~ \"HILO\",\n      moku == \"Hāmākua\" & island == \"Hawaiʻi\" ~ \"HAMAKUA\",\n      moku == \"Kohala\" & island == \"Hawaiʻi\" ~ \"KOHALA\",\n      moku == \"Waiʻanae\" & island == \"Oʻahu\" ~ \"WAIANAE\",\n      moku == \"ʻEwa\" & island == \"Oʻahu\" ~ \"EWA\",\n      moku == \"Kona\" & island == \"Oʻahu\" ~ \"KONA OAH\",\n      moku == \"Koʻolaupoko\" & island == \"Oʻahu\" ~ \"KOOLAUPOKO\",\n      moku == \"Koʻolauloa\" & island == \"Oʻahu\" ~ \"KOOLAULOA\",\n      moku == \"Waialua\" & island == \"Oʻahu\" ~ \"WAIALUA\",\n      moku == \"Mana\" & island == \"Kauaʻi\" ~ \"MANA\",\n      moku == \"Kona\" & island == \"Kauaʻi\" ~ \"KONA KAU\",\n      moku == \"Puna\" & island == \"Kauaʻi\" ~ \"PUNA KAU\",\n      moku == \"Koʻolau\" & island == \"Kauaʻi\" ~ \"KOOLAU KAU\",\n      moku == \"Haleleʻa\" & island == \"Kauaʻi\" ~ \"HALELEA\",\n      moku == \"Nāpali\" & island == \"Kauaʻi\" ~ \"NAPALI\",\n      moku == \"Kona\" & island == \"Kahoʻolawe\" ~ \"KONA KAH\",\n      moku == \"Koʻolau\" & island == \"Kahoʻolawe\" ~ \"KOOLAU KAH\",\n      moku == \"Kona\" & island == \"Lānaʻi\" ~ \"KONA LAN\",\n      moku == \"Koʻolau\" & island == \"Lānaʻi\" ~ \"KOOLAU LAN\",\n      moku == \"Kualuakoʻi\" & island == \"Molokaʻi\" ~ \"KALUAKOI\",\n      moku == \"Pālāʻau\" & island == \"Molokaʻi\" ~ \"PALAAU\",\n      moku == \"Kona\" & island == \"Molokaʻi\" ~ \"KONA MOL\",\n      moku == \"Hālawa\" & island == \"Molokaʻi\" ~ \"HALAWA\",\n      moku == \"Koʻolau\" & island == \"Molokaʻi\" ~ \"KOOLAU MOL\",\n      moku == \"Lāhainā\" & island == \"Maui\" ~ \"LAHAINA\",\n      moku == \"Kealaloloa\" & island == \"Maui\" ~ \"KEALALOLOA\",\n      moku == \"Kula\" & island == \"Maui\" ~ \"KULA\",\n      moku == \"Honuaʻula\" & island == \"Maui\" ~ \"HONUAULA\",\n      moku == \"Kahikinui\" & island == \"Maui\" ~ \"KAHIKINUI\",\n      moku == \"Kaupo\" & island == \"Maui\" ~ \"KAUPO\",\n      moku == \"Kīpahulu\" & island == \"Maui\" ~ \"KIPAHULU\",\n      moku == \"Hāna\" & island == \"Maui\" ~ \"HANA\",\n      moku == \"Koʻolau\" & island == \"Maui\" ~ \"KOOLAU MAU\",\n      moku == \"Hāmākualoa\" & island == \"Maui\" ~ \"HAMAKUALOA\",\n      moku == \"Hāmākuapoko\" & island == \"Maui\" ~ \"HAMAKUAPOKO\",\n      moku == \"Wailuku\" & island == \"Maui\" ~ \"WAILUKU\",\n      moku == \"Kāʻanapali\" & island == \"Maui\" ~ \"KAANAPALI\"\n    )\n  ) %>% \n  relocate(moku_name2, .after = moku)\n\npaged_table(tidied_mhi_conditions_df)\n```\n\n:::\n\n## Data Exportation\n\n### Exporting Processed Data\n\n```{r}\n#| label: export-tidied-dfs-to-csv\n#| code-fold: true\n#| code-summary: \"Export Processed Data\"\n#| eval: false\ntidied_dfs_list <- list(\n  list(df = tidied_mhi_conditions_df, desc_name = \"mhi-conditions\")\n#   list(df = tidied_oahu_marine_extents_df, desc_name = \"oahu-marine-extents\")\n)\n\nmap(tidied_dfs_list, ~export_tidied_dfs_to_csv(.x$df, .x$desc_name))\n```\n\n### Generating Data Dictionaries\n\n```{r}\n#| code-fold: true\n#| code-summary: \"MHI Marine Condition Accounts Data Dictionary\"\ntidied_mhi_conditions_df %>%\n  make_xray() %>% \n  view_xray()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"data-processing.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.26","theme":"litera","toc-location":"left","toc-title":"Data Analysis Workflow:","fontsize":"12pt","page-layout":"full","margin-header":"<br><center>\n![](/www/logos/uhm-logo.png) \n<br><br>\n![](/www/logos/pew-logo.png){width=\"130\"} \n<br><br>\n![](/www/logos/sea-grant-logo.png){height=\"150\"}\n<br><br>\n![](/www/logos/pi-casc-logo.png){height=\"150\"}\n<br><br></center>\n","title":"Data Processing","author":[{"name":"Louis Chua"},{"name":"Dr. Kirsten Oleson"},{"name":"Alemarie Ceria"},{"name":"Elanur Ural"}],"date":"03/20/2024"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}