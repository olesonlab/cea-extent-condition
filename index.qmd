---
title: "Mapping Oʻahu Extents and Conditions"
author: "Alemarie Ceria"
date: 03/20/2024
format: 
  html: 
    code-overflow: wrap
---

## Desired Output(s)

Quarto website or Shiny Dashboard of extents and conditions of each island by moku

*Current Focus*: Oʻahu Extents and Conditions

## Helper Functions

```{r}
#| label: import-data-from-google-sheets-function
#| code-fold: true
#| code-summary: "Function to Import Extents and Conditions Data from Google Sheets"
import_mhi_extents_and_conditions_gs <- function(url_str) {
  imported_sheets <- gs4_get(url_str) %>%
    pluck("sheets")

  sheet_names_lower <- tolower(imported_sheets$name)

  sheets_data <- purrr::map(imported_sheets$name, ~ {
    Sys.sleep(2) 
    read_sheet(url_str, sheet = .x)
  })

  names(sheets_data) <- sheet_names_lower

  return(sheets_data)
}
```

```{r}
#| label: subset-mhi-dfs-function
#| code-fold: true
#| code-summary: "Function to Subset Main Hawaiian Islands (MHI) Dataframes"
subset_mhi_dfs <- function(mhi_dfs, subset, island_str = NULL, moku_str = NULL, extent_str = NULL) {
  if (!subset %in% c("conditions", "extents")) {
    stop("Subset must be either 'conditions' or 'extents'")
  }
  
  dfs <- mhi_dfs[[subset]]
  
  filtered_dfs <- list()
  
  for (name in names(dfs)) {
    df <- dfs[[name]]
    
    conditions_met <- c(
      is.null(island_str) || grepl(island_str, name, ignore.case = TRUE),
      is.null(moku_str) || grepl(moku_str, name, ignore.case = TRUE),
      is.null(extent_str) || grepl(extent_str, name, ignore.case = TRUE)
    )
    
    if (all(conditions_met)) {
      filtered_dfs[[name]] <- df
    }
  }
  
  return(filtered_dfs)
}
```

```{r}
#| label: export-tidied-dfs-to-csv-function
#| code-fold: true
#| code-summary: "Function to Export Tidied Dataframes to CSV"
export_tidied_dfs_to_csv <- function(df, desc_name, dir_path = "data/tidied/") {
  if (!dir.exists(dir_path)) {
    dir.create(dir_path, recursive = TRUE)
  }
  
  file_path <- paste0(dir_path,
                      format(Sys.Date(), "%Y-%m-%d"),
                      "_tidied-", desc_name, ".csv")
  
  write.csv(df, file_path, row.names = FALSE)
  
  message("File saved to: ", file_path)
}
```

```{r}
#| label: set-temp-column-names-function
#| code-fold: true
#| code-summary: "Function to Set Temporary Column Names"
set_temp_column_names <- function(df) {
  df <- rbind(colnames(df), df)
  
  colnames(df) <- paste("temp", seq_len(ncol(df)), sep = "_")
  
  return(df)
}
```

```{r}
#| label: create-keyword-search-columns 
#| code-fold: true
#| code-summary: "Function to Create New Columns Based on Keyword Searches"
create_keyword_search_columns <- function(df, conditions) {
  reduce(conditions, function(df, cond) {
    df %>%
      mutate(across(everything(), as.character)) %>%
      mutate(
        !!sym(cond$new_col_name) := if_else(
          rowSums(select(., -matches(cond$target_col_name)) == cond$keyword, na.rm = TRUE) > 0,
          .[[cond$target_col_name]],
          NA_character_
        )
      )
  }, .init = df)
}
```

```{r}
#| label: fill-cols-down-function
#| code-fold: true
#| code-summary: "Function to Efficiently Fill Columns"
fill_cols_down <- function(df, cols) {
  df %>%
    tidyr::fill(!!!syms(cols), .direction = "down")
}
```

```{r}
#| label: relocate-cols-function 
#| code-fold: true
#| code-summary: "Function to Relocate Columns to the Front of a Dataframe"
relocate_cols <- function(df, col_names, before_col) {
  existing_col_names <- col_names[col_names %in% names(df)]
  if (before_col %in% names(df)) {
    df %>% 
      relocate(all_of(existing_col_names), .before = all_of(before_col))
  } else {
    warning("The specified 'before_col' does not exist in the dataframe. Relocating to the beginning.")
    df %>% 
      relocate(all_of(existing_col_names))
  }
}
```

```{r}
#| label: remove-undesired-values-function
#| code-fold: true
#| code-summary: "Function to Remove Undesired Values"
remove_undesired_vals <- function(df) {
  df %>% 
    slice(-1) %>% 
    filter(!(is.na(temp_1) & is.na(temp_2))) %>% 
    select(where(~ !all(is.na(.)))) 
}
```

```{r}
#| label: create-column-from-regex-function
#| code-fold: true
#| code-summary: "Function to Create New Columns Based on Regular Expressions"
create_column_from_regex <- function(df, source_column, new_column, regex_pattern) {
  df %>% 
    mutate(!!new_column := str_extract(!!sym(source_column), regex_pattern)) %>% 
    select(-source_column)
}
```

```{r}
#| label: separate-columns-functions
#| code-fold: true
#| code-summary: "Function to Separate Columns"
separate_columns <- function(df, specifications) {
  reduce(specifications, function(df, spec) {
    df %>% 
      separate(
        !!spec$source_column,
        into = spec$into,
        sep = spec$sep,
        convert = spec$convert
      ) %>%
      mutate(across(all_of(spec$into), str_trim))
  }, .init = df)
}
```

```{r}
#| label: tidy-oahu-conditions-data-function
#| code-fold: true
#| code-summary: "Function to Tidy Oʻahu Conditions Data"
tidy_conditions_data <- function(df) {
  df %>%
  set_temp_column_names() %>%
  create_keyword_search_columns(oahu_conditions_keyword_searches) %>%
  fill_cols_down(c("island", "moku", "ecosystem_type")) %>% 
  relocate_cols(., c("island", "moku", "ecosystem_type"), "temp_1") %>% 
  remove_undesired_vals() %>% 
  set_names(rename_oahu_conditions_cols) %>% 
  filter(!(descriptor %in% c("Indicators", "Descriptor")) & 
       !grepl("\\*", typology_class) & 
       !grepl("\\^", typology_class)) %>% 
  pivot_longer(., cols = c(7:14), names_to = "categories", values_to = "value"
  ) %>% 
  separate_columns(oahu_conditions_cols_to_sep) %>% 
  fill_cols_down(., c("class_code", "typology", "unit")) %>% 
  mutate(
    class_code = str_remove(class_code, "^\\(Class "),
    measurement = if_else(is.na(measurement), "Actively Managed or Conserved", measurement),
    island = gsub("Oahu", "Oʻahu", island),
    moku = gsub("Ewa", "ʻEwa", moku)) %>% 
  mutate(
    across(where(is.character), str_trim), 
    across(where(is.character), 
           ~gsub("/\\s+", "/", .)), 
    across(c(1:9), as.factor), 
    unit = if_else(descriptor == "Rugosity (predicted)", "-", unit),
    category = if_else(ecosystem_type == "Beaches/Dunes" & category == "Actively Managed or Conserved", "Reference Extent Publicly Owned", category),
    measurement = if_else(ecosystem_type == "Beaches/Dunes" & category == "Reference Extent Publicly Owned", "Reference Extent Publicly Owned", measurement)
  ) %>% 
  filter(measurement != "Change in Indicator")
}
```

## Data Importation

### Data Sources

### Procedure

```{r}
#| label: install-packages-and-load-libraries
#| code-fold: true
#| code-summary: "Install Packages and Load Libraries"
if (!requireNamespace("pacman", quietly = TRUE)) {
  install.packages("pacman")
}

pacman::p_load(renv, yaml, rmarkdown, sf, leaflet, mapview, htmlwidgets,
               janitor, tidyverse, googlesheets4, terra, lwgeom,
               viridis, stars)
```

```{r}
#| label: configs
#| code-fold: true
#| code-summary: "Configurations"
gs_urls <- yaml::read_yaml("code/gs_urls.yml")
```

```{r}
#| label: authenticate-google-account
#| code-fold: true
#| code-summary: "Authenticate Google account"
#| eval: false
gs4_auth()
```

::: {.panel-tabset}

#### General

Import extents and conditions data from Google Sheets for MHI:

```{r}
#| label: import-data-from-google-sheets
#| eval: false
mhi_extents_dfs <- import_mhi_extents_and_conditions_gs(gs_urls$extents)

mhi_conditions_dfs <- import_mhi_extents_and_conditions_gs(gs_urls$conditions)
```

Efficiently load extents and conditions data for MHI:

```{r}
#| label: efficiently-load-mhi-extents-and-conditions-data
# Export once or when updated
# mhi_dfs <- mhi_dfs <- list(
#   conditions = mhi_conditions_dfs,
#   extents = mhi_extents_dfs
#   )
# save(mhi_dfs, file = "data/raw/mhi_dfs.RData")

base::load("data/raw/mhi_dfs.RData")
```

List of MHI dataframes:

```{r}
names(mhi_dfs$extents)
names(mhi_dfs$conditions)
```

#### Specific

Subset MHI dataframes:

```{r}
#| label: import-oahu-extents-and-conditions-dat
oahu_extents_dfs <- subset_mhi_dfs(
  mhi_dfs, subset = "extents", island_str = "oahu"
  )

oahu_conditions_dfs <- subset_mhi_dfs(
  mhi_dfs, subset = "conditions", island_str = "oahu"
  )
```

List of Oʻahu dataframes:

```{r}
names(oahu_extents_dfs)
names(oahu_conditions_dfs)
```

:::

## Data Cleaning and Preparation

### Tidying and Merging Raw Datasets

::: {.panel-tabset}

#### Extents

##### Marine

```{r}
#| label: tidy-oahu-extents-data
#| code-fold: true
#| code-summary: "Tidy Oʻahu Marine Extents Data"
#| eval: false
oahu_extents_keyword_searches <- list(
  list(keyword = "ISLAND", target_col_name = "temp_1", new_col_name = "island"),
  list(keyword = "MOKU", target_col_name = "temp_1", new_col_name = "moku")
)

tidied_oahu_marine_extents_df <- oahu_extents_dfs$marine_oahu %>%
  set_temp_column_names() %>%
  create_keyword_search_columns(oahu_extents_keyword_searches) %>%
  fill_cols_down(c("island", "moku")) %>% 
  relocate_cols(., c("island", "moku"), "temp_1") 
  
  
  
  select(1, 2, 8:13) %>% 
  set_names(new_marine_extent_names) %>%
  mutate(island = "Oʻahu") %>%
  fill(moku, .direction = "down") %>%
  mutate(
    moku = case_when(
      lag(island) == "MOKU" ~ moku,
      TRUE ~ moku
    )
  ) %>% 
  filter(temp1 %in% c("Area (km2)", "Opening Stock (2004-2014)")) %>%
  pivot_longer(
    cols = c(4:8),
    names_to = "temp",
    values_to = "habitat"
  ) %>% 
  select(-c(3, 4)) %>% 
  mutate(
    opening_stock = if_else(grepl("^\\d+(\\.\\d+)?$|^-$", habitat), as.character(habitat), NA_character_),
    opening_stock = if_else(opening_stock == "-", "0", opening_stock),
    opening_stock = as.numeric(opening_stock)
  ) %>% 
  mutate(row = row_number()) %>%
  # Create a grouping variable for habitats and their corresponding stock values
  group_by(island, moku) %>%
  mutate(group = cumsum(habitat %in% c("Soft Bottom", "Other Hard Bottom", "Rock/ Boulder", "Pavement", "Coral Dominated Hard Bottom") | row == 1)) %>%
  # Shift opening_stock values up within each group
  mutate(opening_stock = if_else(group > 1 & !is.na(opening_stock), opening_stock, lead(opening_stock, n = 5))) %>%
  ungroup() %>%
  # Filter out the stock value rows, leaving only habitat rows
  filter(habitat %in% c("Soft Bottom", "Other Hard Bottom", "Rock/ Boulder", "Pavement", "Coral Dominated Hard Bottom")) %>%
  select(-row, -group) %>% 
  mutate(
    across(c(island, moku), as.factor),
    habitat = as.factor(map_chr(habitat, ~ .x[1]))
    ) %>% 
  # filter(habitat != "Other Hard Bottom") %>% 
  mutate(habitat = if_else(habitat == "Rock/ Boulder", "Rock/Boulder", habitat))

paged_table(tidied_oahu_marine_extents_df)
```
<br>

##### Terrestrial

```{r}
#| eval: false
new_terrestrial_extent_names <- c("island", "moku", "habitat")
tidied_oahu_terrestrial_extent_df <- oahu_extents_dfs$terrestrial_oahu %>% 
  mutate(island = "Oʻahu",
         moku = if_else(TERRESTRIAL == "MOKU", ...2, NA_character_)) %>% 
  fill(c(island, moku), .direction = "down") %>% 
  slice(-c(1:30)) %>% 
  select(-c(1, 12:15))
```

#### Conditions

```{r}
#| label: tidy-oahu-conditions-data
#| code-fold: true
#| code-summary: "Tidy Oʻahu Conditions Data"
#| warning: false
oahu_conditions_keyword_searches <- list(
  list(keyword = "ISLAND", target_col_name = "temp_5", new_col_name = "island"),
  list(keyword = "MOKU", target_col_name = "temp_5", new_col_name = "moku"),
  list(keyword = "Ecosystem Type", target_col_name = "temp_5", new_col_name = "ecosystem_type")
)

rename_oahu_conditions_cols <- c("island", "moku", "ecosystem_type", "typology_class",
                        "descriptor", "unit", "Variable Values: Opening Value",
                        "Variable Values: Closing Value", 
                        "Actively Managed or Conserved", 
                        "Reference Level Values: Upper Level",
                        "Reference Level Values: Lower Level",
                        "Indicator Values (Rescaled): Opening Value",
                        "Indicator Values (Rescaled): Closing Value",
                        "Indicator Values (Rescaled): Change in Indicator")

oahu_conditions_cols_to_sep <- list(
  list(source_column = "categories", into = c("category", "measurement"), sep = ": ", convert = TRUE
  ),
  list(source_column = "typology_class", into = c("class_code", "typology"), sep = "\\) ", convert = TRUE
  )
)

tidied_oahu_conditions_df <- map_dfr(oahu_conditions_dfs, tidy_conditions_data)

paged_table(tidied_oahu_conditions_df)
```

:::

## Data Exportation

### Exporting Processed Data

```{r}
#| label: export-tidied-dfs-to-csv
#| eval: false
tidied_dfs_list <- list(
  list(df = tidied_oahu_conditions_df, desc_name = "oahu-conditions")
#   list(df = tidied_oahu_marine_extents_df, desc_name = "oahu-marine-extents")
)

map(tidied_dfs_list, ~export_tidied_dfs_to_csv(.x$df, .x$desc_name))
```

### Generating Data Dictionaries

## Visualizations

```{r}
#| eval: false
#| echo: false
crs <- "EPSG:4326"
```

```{r}
#| eval: false
#| echo: false
moku <- st_read("data/spatial/moku/Moku_NEW.shp", quiet = TRUE)

# Assuming 'moku' is your spatial vector data and needs to be transformed as well
moku_transformed <- moku %>%
  clean_names() %>%
  mutate(name2 = str_to_title(name2)) %>%
  st_transform(crs = crs)

waianae_moku <- moku_transformed %>% 
  filter(name2 == "Waianae")
```

```{r}
#| eval: false
#| echo: false
mhi_marine_extent <- terra::rast("data/spatial/extent-layers/marine/Benthic_Habitat_5Classes_2022_10.tif") %>% 
  terra::project(crs)

waianae_moku_marine_extent <- mhi_marine_extent %>% 
  crop(waianae_moku) %>% 
  as.factor()

# waianae_moku_marine_extent@ccp$getCategories()
# 
# getCategories()
# activeCat(waianae_moku_marine_extent)

# waianae_moku_marine_extent@cpp$activeCat() <- 1
```

```{r}
#| eval: false
#| echo: false
# Define the colors for the habitat categories that are actually present in the raster
habitat_colors <- c("white", "#F4E8C1", "#808080", "green", "#FF4500")  # Excludes "Other Hard Bottom"

# Update the RAT with the correct values and colors, excluding "Other Hard Bottom"
rat <- data.frame(
  value = c(0, 1, 3, 4, 5),  # Updated to reflect the values that are present
  habitat = c("NA", "Soft Bottom", "Rock/Boulder", "Pavement", "Coral Dominated Hard Bottom"),
  color = habitat_colors
)

# Assign the updated RAT to the raster
levels(waianae_moku_marine_extent) <- rat

na_color <- "black"  
rat$color[is.na(rat$color)] <- na_color
```

```{r}
#| eval: false
#| echo: false
colored_waianae_moku_extents <- rat %>% 
  left_join(tidied_waianae_oahu_extents, ., by = "habitat")
```


```{r}
#| warning: false
#| eval: false
#| echo: false
terra::plot(waianae_moku_marine_extent, col = colored_waianae_moku_extents$color)
lines(waianae_moku, col="forestgreen", lwd=5) 
```

```{r}
#| eval: false
#| echo: false
leaflet() %>%
  setView(lng = -157.99827222584105, lat = 21.47, zoom = 10) %>%
  addProviderTiles(providers$Esri.WorldImagery) %>%
  addRasterImage(waianae_moku_marine_extent, opacity = 0.8, colors = rat$color) %>%
  # addLegend(pal = rat$Color, values = rat$Value, opacity = 1, title = "Habitat") %>% 
  addPolygons(data = waianae_moku, color = "#F4C2A5", opacity = 0.5,
              label = ~as.character(name2),
              labelOptions = labelOptions(
                direction = 'auto', 
                style = list('font-size' = '15pt',
                             'font-weight' = 'bold'), 
                noHide = TRUE)
              ) 
```

```{r}
#| eval: false
#| echo: false
# Generate a color palette
palette <- colorFactor(palette = "viridis", domain = waianae_moku_marine_extent_df$Habitat)

# Create the Leaflet map
leaflet(waianae_moku_marine_extent_sf) %>%
  setView(lng = -158.18700955981603, lat = 21.44041625309884, zoom = 9) %>%
  addProviderTiles(providers$Esri.WorldImagery) %>%
  addPolygons(fillColor = ~colors(layer), color = ~colors(layer), fillOpacity = 0.7, weight = 0) %>%
  addLegend(pal = colors, values = ~layer, opacity = 1, title = "Habitat") %>% 
  addPolygons(data = waianae_moku, color = "#F4C2A5", opacity = 0.5,
              label = ~as.character(name2),
              labelOptions = labelOptions(
                direction = 'auto', 
                style = list('font-size' = '15pt',
                             'font-weight' = 'bold'), 
                noHide = TRUE)
              ) 
```

```{r}
#| eval: false
#| echo: false
mapview(waianae_moku_marine_extent, legend = TRUE, trim = TRUE, 
        use.layer.names = TRUE) + 
  mapview(waianae_moku, label = waianae_moku$name2)
```

```{r}
#| code-fold: true
#| code-summary: "Create Interactive Map"
#| fig-height: 10
#| fig-width: 15
#| eval: false
#| echo: false

leaflet() %>%
  setView(lng = -158.18700955981603, lat = 21.44041625309884, zoom = 12) %>%
  addProviderTiles(providers$Esri.WorldImagery) %>%
  addTiles(urlTemplate = "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
           options = tileOptions(opacity = 0.9)) %>%
  addTiles(urlTemplate = "https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}",
           options = tileOptions(opacity = 0.9)) %>%
    addRasterImage(marine_extent, opacity = 0.8, colors = viridis::viridis(100)) %>%
  addPolygons(data = moku_transformed, 
              color = "#F4C2A5",
              opacity = 0.5,
              label = ~as.character(name2), # Add hover labels
              labelOptions = labelOptions(
                direction = 'top', 
                style = list('font-size' = '20pt'),
                noHide = TRUE
                )
              )
```

## Resources

- [Esri | Sentinel-2 Land Cover Explorer](https://livingatlas.arcgis.com/landcoverexplorer/#mapCenter=-158.007%2C21.395%2C11&mode=step&timeExtent=2017%2C2022&year=2022)
- [Unleash the Power of 3D: Crafting Stunning Land Cover Maps with R by Milos Makes Maps](https://www.youtube.com/watch?v=y_Kzg24Ciuo)