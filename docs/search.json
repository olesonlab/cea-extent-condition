[
  {
    "objectID": "code/dashboard-modules/dashboard-intro.html",
    "href": "code/dashboard-modules/dashboard-intro.html",
    "title": "Aloha!",
    "section": "",
    "text": "Aloha!\n\n       \n\nCreated By: Alemarie Ceria  Last Updated: 05/09/2024 \n© 2024 Oleson Lab, University of Hawaii at Manoa"
  },
  {
    "objectID": "data-processing.html",
    "href": "data-processing.html",
    "title": "Data Processing",
    "section": "",
    "text": "Quarto website or Shiny Dashboard of extents and conditions of each island by moku\nCurrent Focus: Oʻahu Extents and Conditions"
  },
  {
    "objectID": "data-processing.html#desired-outputs",
    "href": "data-processing.html#desired-outputs",
    "title": "Data Processing",
    "section": "",
    "text": "Quarto website or Shiny Dashboard of extents and conditions of each island by moku\nCurrent Focus: Oʻahu Extents and Conditions"
  },
  {
    "objectID": "data-processing.html#helper-functions",
    "href": "data-processing.html#helper-functions",
    "title": "Data Processing",
    "section": "Helper Functions",
    "text": "Helper Functions\n\nData ImportationData Cleaning and PreparationData Exportation\n\n\n\n\nFunction to Import Extents and Conditions Data from Google Sheets\nimport_mhi_extents_and_conditions_gs &lt;- function(url_str) {\n  imported_sheets &lt;- gs4_get(url_str) %&gt;%\n    pluck(\"sheets\")\n\n  sheet_names_lower &lt;- tolower(imported_sheets$name)\n\n  sheets_data &lt;- purrr::map(imported_sheets$name, ~ {\n    Sys.sleep(2) \n    read_sheet(url_str, sheet = .x)\n  })\n\n  names(sheets_data) &lt;- sheet_names_lower\n\n  return(sheets_data)\n}\n\n\n\n\nFunction to Get Up-To-Date MHI Data\nget_up_to_date_mhi_data &lt;- function(extents_path, conditions_path) {\n  mhi_extents_dfs &lt;- import_mhi_extents_and_conditions_gs(extents_path)\n\n  mhi_conditions_dfs &lt;- import_mhi_extents_and_conditions_gs(conditions_path)\n  \n  mhi_dfs &lt;- list(\n    conditions = mhi_conditions_dfs,\n    extents = mhi_extents_dfs\n    )\n  \n  return(mhi_dfs)\n}\n\n\n\n\nFunction to Export Up-To-Date MHI Data\nexport_mhi_data_to_rdata &lt;- function(mhi_dfs, export_dir_path) {\n  current_date &lt;- format(Sys.Date(), \"%Y-%m-%d\")\n  save(mhi_dfs, file = paste0(export_dir_path, current_date, \"_mhi-extents-conditions-dfs.RData\"))\n}\n\n\n\n\nFunction to Subset Main Hawaiian Islands (MHI) Dataframes\nsubset_mhi_dfs &lt;- function(mhi_dfs, subset, island_str = NULL, moku_str = NULL, extent_str = NULL) {\n  if (!subset %in% c(\"conditions\", \"extents\")) {\n    stop(\"Subset must be either 'conditions' or 'extents'\")\n  }\n  \n  dfs &lt;- mhi_dfs[[subset]]\n  \n  filtered_dfs &lt;- list()\n  \n  for (name in names(dfs)) {\n    df &lt;- dfs[[name]]\n    \n    conditions_met &lt;- c(\n      is.null(island_str) || grepl(island_str, name, ignore.case = TRUE),\n      is.null(moku_str) || grepl(moku_str, name, ignore.case = TRUE),\n      is.null(extent_str) || grepl(extent_str, name, ignore.case = TRUE)\n    )\n    \n    if (all(conditions_met)) {\n      filtered_dfs[[name]] &lt;- df\n    }\n  }\n  \n  return(filtered_dfs)\n}\n\n\n\n\n\n\nFunction to Set Temporary Column Names\nset_temp_column_names &lt;- function(df) {\n  df &lt;- rbind(colnames(df), df)\n  \n  colnames(df) &lt;- paste(\"temp\", seq_len(ncol(df)), sep = \"_\")\n  \n  return(df)\n}\n\n\n\n\nFunction to Create New Columns Based on Keyword Searches\ncreate_keyword_search_columns &lt;- function(df, conditions) {\n  reduce(conditions, function(df, cond) {\n    df %&gt;%\n      mutate(across(everything(), as.character)) %&gt;%\n      mutate(\n        !!sym(cond$new_col_name) := if_else(\n          rowSums(select(., -matches(cond$target_col_name)) == cond$keyword, na.rm = TRUE) &gt; 0,\n          .[[cond$target_col_name]],\n          NA_character_\n        )\n      )\n  }, .init = df)\n}\n\n\n\n\nFunction to Efficiently Fill Columns\nfill_cols_down &lt;- function(df, cols) {\n  df %&gt;%\n    tidyr::fill(!!!syms(cols), .direction = \"down\")\n}\n\n\n\n\nFunction to Relocate Columns to the Front of a Dataframe\nrelocate_cols &lt;- function(df, col_names, before_col) {\n  existing_col_names &lt;- col_names[col_names %in% names(df)]\n  if (before_col %in% names(df)) {\n    df %&gt;% \n      relocate(all_of(existing_col_names), .before = all_of(before_col))\n  } else {\n    warning(\"The specified 'before_col' does not exist in the dataframe. Relocating to the beginning.\")\n    df %&gt;% \n      relocate(all_of(existing_col_names))\n  }\n}\n\n\n\n\nFunction to Remove Undesired Values\nremove_undesired_vals &lt;- function(df) {\n  df %&gt;% \n    slice(-1) %&gt;% \n    filter(!(is.na(temp_1) & is.na(temp_2))) %&gt;% \n    select(where(~ !all(is.na(.)))) \n}\n\n\n\n\nFunction to Create New Columns Based on Regular Expressions\ncreate_column_from_regex &lt;- function(df, source_column, new_column, regex_pattern) {\n  df %&gt;% \n    mutate(!!new_column := str_extract(!!sym(source_column), regex_pattern)) %&gt;% \n    select(-source_column)\n}\n\n\n\n\nFunction to Separate Columns\nseparate_columns &lt;- function(df, specifications) {\n  reduce(specifications, function(df, spec) {\n    df %&gt;% \n      separate(\n        !!spec$source_column,\n        into = spec$into,\n        sep = spec$sep,\n        convert = spec$convert\n      ) %&gt;%\n      mutate(across(all_of(spec$into), str_trim))\n  }, .init = df)\n}\n\n\n\n\nFunction to Tidy Oʻahu Conditions Data\ntidy_conditions_data &lt;- function(df, keyword_searches, col_names, cols_to_sep) {\n  df %&gt;%\n    set_temp_column_names() %&gt;%\n    dplyr::select(c(1:11)) %&gt;% \n    create_keyword_search_columns(keyword_searches) %&gt;%\n      fill_cols_down(c(\"island\", \"moku\", \"ecosystem_type\")) %&gt;% \n      relocate_cols(., c(\"island\", \"moku\", \"ecosystem_type\"), \"temp_1\") %&gt;% \n      remove_undesired_vals() %&gt;% \n      set_names(col_names) %&gt;% \n      filter(!(descriptor %in% c(\"Indicators\", \"Descriptor\")) & \n           !grepl(\"\\\\*\", typology_class) & \n           !grepl(\"\\\\^\", typology_class)) %&gt;% \n      pivot_longer(., cols = c(7:14), names_to = \"categories\", values_to = \"value\"\n      ) %&gt;% \n      separate_columns(cols_to_sep) %&gt;% \n      fill_cols_down(., c(\"class_code\", \"typology\", \"unit\")) %&gt;% \n      mutate(\n        class_code = str_remove(class_code, \"^\\\\(Class \"),\n        measurement = if_else(is.na(measurement), \"Actively Managed or Conserved\", measurement),\n        island = gsub(\"Oahu\", \"Oʻahu\", island),\n        moku = gsub(\"Ewa\", \"ʻEwa\", moku)\n        ) %&gt;% \n      mutate(\n        across(where(is.character), str_trim), \n        across(where(is.character), \n               ~gsub(\"/\\\\s+\", \"/\", .)), \n        across(c(1:9), as.factor), \n        unit = if_else(descriptor == \"Rugosity (predicted)\", \"-\", unit),\n        category = if_else(ecosystem_type == \"Beaches/Dunes\" & category == \"Actively Managed or Conserved\", \"Reference Extent Publicly Owned\", category),\n        measurement = if_else(ecosystem_type == \"Beaches/Dunes\" & category == \"Reference Extent Publicly Owned\", \"Reference Extent Publicly Owned\", measurement)\n      ) %&gt;% \n      filter(measurement != \"Change in Indicator\") %&gt;% \n    mutate(value = strsplit(value, \",\")) %&gt;%\n    unnest(value)\n}\n\n\n\n\n\n\nFunction to Export Tidied Dataframes to CSV\nexport_tidied_dfs_to_csv &lt;- function(df, desc_name, dir_path = \"data/tidied/\") {\n  if (!dir.exists(dir_path)) {\n    dir.create(dir_path, recursive = TRUE)\n  }\n  \n  file_path &lt;- paste0(dir_path,\n                      format(Sys.Date(), \"%Y-%m-%d\"),\n                      \"_tidied-\", desc_name, \".csv\")\n  \n  write.csv(df, file_path, row.names = FALSE)\n  \n  message(\"File saved to: \", file_path)\n}"
  },
  {
    "objectID": "data-processing.html#data-importation-1",
    "href": "data-processing.html#data-importation-1",
    "title": "Data Processing",
    "section": "Data Importation",
    "text": "Data Importation\n\nData Sources\n\n\nProcedure\n\n\nInstall Packages and Load Libraries\nif (!requireNamespace(\"pacman\", quietly = TRUE)) {\n  install.packages(\"pacman\")\n}\n\npacman::p_load(fs, renv, yaml, rmarkdown, sf, leaflet, mapview, htmlwidgets,\n               janitor, tidyverse, googlesheets4, terra, lwgeom,\n               viridis, stars, markdown)\n\n# install.packages(\"devtools\")\n# devtools::install_github(\"agstn/dataxray\")\nlibrary(dataxray)\n\n\n\n\nConfigurations\ngs_urls &lt;- yaml::read_yaml(\"code/gs_urls.yml\")\n\n\n\n\nAuthenticate Google account\ngs4_auth()\n\n\n\nGeneralSpecific\n\n\n\n\nImport Extents and Conditions Data from Google Sheets for MHI\nmhi_dfs &lt;- get_up_to_date_mhi_data(\n  gs_urls$extents, \n  gs_urls$conditions\n)\n\n\n\n\nExport Up-to-Date MHI Dataframes\nexport_mhi_data_to_rdata(mhi_dfs, \"data/raw/\")\n\n\n\n\nEfficiently load extents and conditions data for MHI\nraw_data_paths &lt;- fs::dir_ls(\"data/raw\")\n\n# for (i in seq_along(raw_data_paths)) {\n#     cat(i, \"=\", raw_data_paths[i], \"\\n\")\n# }\n\nbase::load(raw_data_paths[2])\n\n\n\n\nList of MHI Dataframes\nnames(mhi_dfs$extents)\n\n\n [1] \"marine_oahu\"           \"terrestrial_oahu\"      \"marine_hawaii\"        \n [4] \"terrestrial_hawaii\"    \"marine_kahoolawe\"      \"terrestrial_kahoolawe\"\n [7] \"marine_kauai\"          \"terrestrial_kauai\"     \"marine_lanai\"         \n[10] \"terrestrial_lanai\"     \" marine_maui\"          \"terrestrial_maui\"     \n[13] \"marine_molokai\"        \"terrestrial_molokai\"   \"marine_niihau\"        \n[16] \"terrestrial_niihau\"   \n\n\nList of MHI Dataframes\nnames(mhi_dfs$conditions)\n\n\n [1] \"kona_molokai\"     \"kaluakoi_molokai\" \"palaau_molokai\"   \"halawa_molokai\"  \n [5] \"koolau_molokai\"   \"kahikinui_maui\"   \"kaupo_maui\"       \"honuaula_maui\"   \n [9] \"kipahulu_maui\"    \"hana_maui\"        \"kula_maui\"        \"kealaloloa_maui\" \n[13] \"lahaina_maui\"     \"wailuku_maui\"     \"hamakualoa _maui\" \"hamakuapoko_maui\"\n[17] \"koolau_maui\"      \"kaanapali_maui\"   \"koolau_lanai\"     \"kona_lanai\"      \n[21] \"halelea_kauai\"    \"koolau_kauai\"     \"napali_kauai\"     \"puna_kauai\"      \n[25] \"kona_kauai\"       \"mana_kauai\"       \"kona_kahoolawe\"   \"koolau_kahoolawe\"\n[29] \"hamakua_hawaii\"   \"hilo_hawaii\"      \"kau_hawaii\"       \"kohala_hawaii\"   \n[33] \"kona_hawaii\"      \"puna_hawaii\"      \"waianae_oahu\"     \"koolaupoko_oahu\" \n[37] \"ewa_oahu\"         \"kona_oahu\"        \"koolauloa_oahu\"   \"waialua_oahu\"    \n[41] \"clean_\"          \n\n\n\n\n\n\nSubset MHI Dataframes\noahu_extents_dfs &lt;- subset_mhi_dfs(\n  mhi_dfs, subset = \"extents\", island_str = \"oahu\"\n  )\n\noahu_conditions_dfs &lt;- subset_mhi_dfs(\n  mhi_dfs, subset = \"conditions\", island_str = \"oahu\"\n  )\n\n\n\n\nList of Oʻahu Dataframes\nnames(oahu_extents_dfs)\n\n\n[1] \"marine_oahu\"      \"terrestrial_oahu\"\n\n\nList of Oʻahu Dataframes\nnames(oahu_conditions_dfs)\n\n\n[1] \"waianae_oahu\"    \"koolaupoko_oahu\" \"ewa_oahu\"        \"kona_oahu\"      \n[5] \"koolauloa_oahu\"  \"waialua_oahu\""
  },
  {
    "objectID": "data-processing.html#data-cleaning-and-preparation-1",
    "href": "data-processing.html#data-cleaning-and-preparation-1",
    "title": "Data Processing",
    "section": "Data Cleaning and Preparation",
    "text": "Data Cleaning and Preparation\n\nTidying and Merging Raw Datasets\n\nExtentsConditions\n\n\n\nMarine\n\n\nTidy Oʻahu Marine Extents Data\noahu_extents_keyword_searches &lt;- list(\n  list(keyword = \"ISLAND\", target_col_name = \"temp_1\", new_col_name = \"island\"),\n  list(keyword = \"MOKU\", target_col_name = \"temp_1\", new_col_name = \"moku\")\n)\n\ntidied_oahu_marine_extents_df &lt;- oahu_extents_dfs$marine_oahu %&gt;%\n  set_temp_column_names() %&gt;%\n  create_keyword_search_columns(oahu_extents_keyword_searches) %&gt;%\n  fill_cols_down(c(\"island\", \"moku\")) %&gt;% \n  relocate_cols(., c(\"island\", \"moku\"), \"temp_1\") \n  \n  \n  \n  select(1, 2, 8:13) %&gt;% \n  set_names(new_marine_extent_names) %&gt;%\n  mutate(island = \"Oʻahu\") %&gt;%\n  fill(moku, .direction = \"down\") %&gt;%\n  mutate(\n    moku = case_when(\n      lag(island) == \"MOKU\" ~ moku,\n      TRUE ~ moku\n    )\n  ) %&gt;% \n  filter(temp1 %in% c(\"Area (km2)\", \"Opening Stock (2004-2014)\")) %&gt;%\n  pivot_longer(\n    cols = c(4:8),\n    names_to = \"temp\",\n    values_to = \"habitat\"\n  ) %&gt;% \n  select(-c(3, 4)) %&gt;% \n  mutate(\n    opening_stock = if_else(grepl(\"^\\\\d+(\\\\.\\\\d+)?$|^-$\", habitat), as.character(habitat), NA_character_),\n    opening_stock = if_else(opening_stock == \"-\", \"0\", opening_stock),\n    opening_stock = as.numeric(opening_stock)\n  ) %&gt;% \n  mutate(row = row_number()) %&gt;%\n  # Create a grouping variable for habitats and their corresponding stock values\n  group_by(island, moku) %&gt;%\n  mutate(group = cumsum(habitat %in% c(\"Soft Bottom\", \"Other Hard Bottom\", \"Rock/ Boulder\", \"Pavement\", \"Coral Dominated Hard Bottom\") | row == 1)) %&gt;%\n  # Shift opening_stock values up within each group\n  mutate(opening_stock = if_else(group &gt; 1 & !is.na(opening_stock), opening_stock, lead(opening_stock, n = 5))) %&gt;%\n  ungroup() %&gt;%\n  # Filter out the stock value rows, leaving only habitat rows\n  filter(habitat %in% c(\"Soft Bottom\", \"Other Hard Bottom\", \"Rock/ Boulder\", \"Pavement\", \"Coral Dominated Hard Bottom\")) %&gt;%\n  select(-row, -group) %&gt;% \n  mutate(\n    across(c(island, moku), as.factor),\n    habitat = as.factor(map_chr(habitat, ~ .x[1]))\n    ) %&gt;% \n  # filter(habitat != \"Other Hard Bottom\") %&gt;% \n  mutate(habitat = if_else(habitat == \"Rock/ Boulder\", \"Rock/Boulder\", habitat))\n\npaged_table(tidied_oahu_marine_extents_df)\n\n\n\n\n\nTerrestrial\n\n\nTidy Oʻahu Terrestrial Extents Data\nnew_terrestrial_extent_names &lt;- c(\"island\", \"moku\", \"habitat\")\ntidied_oahu_terrestrial_extent_df &lt;- oahu_extents_dfs$terrestrial_oahu %&gt;% \n  mutate(island = \"Oʻahu\",\n         moku = if_else(TERRESTRIAL == \"MOKU\", ...2, NA_character_)) %&gt;% \n  fill(c(island, moku), .direction = \"down\") %&gt;% \n  slice(-c(1:30)) %&gt;% \n  select(-c(1, 12:15))\n\n\n\n\n\n\n\nTidy Oʻahu Conditions Data\nconditions_keyword_searches &lt;- list(\n  list(keyword = \"ISLAND\", target_col_name = \"temp_5\", new_col_name = \"island\"),\n  list(keyword = \"MOKU\", target_col_name = \"temp_5\", new_col_name = \"moku\"),\n  list(keyword = \"Ecosystem Type\", target_col_name = \"temp_5\", new_col_name = \"ecosystem_type\")\n)\n\nrename_conditions_cols &lt;- c(\"island\", \"moku\", \"ecosystem_type\", \"typology_class\",\n                        \"descriptor\", \"unit\", \"Variable Values: Opening Value\",\n                        \"Variable Values: Closing Value\", \n                        \"Actively Managed or Conserved\", \n                        \"Reference Level Values: Upper Level\",\n                        \"Reference Level Values: Lower Level\",\n                        \"Indicator Values (Rescaled): Opening Value\",\n                        \"Indicator Values (Rescaled): Closing Value\",\n                        \"Indicator Values (Rescaled): Change in Indicator\")\n\nconditions_cols_to_sep &lt;- list(\n  list(source_column = \"categories\", into = c(\"category\", \"measurement\"), sep = \": \", convert = TRUE\n  ),\n  list(source_column = \"typology_class\", into = c(\"class_code\", \"typology\"), sep = \"\\\\) \", convert = TRUE\n  )\n)\n\nmhi_dfs$conditions &lt;- mhi_dfs$conditions %&gt;%\n  .[-grep(\"^clean_\", names(.))]\n\ntidied_mhi_conditions_df &lt;- map_dfr(mhi_dfs$conditions, ~ tidy_conditions_data(\n  df = .x, \n  keyword_searches = conditions_keyword_searches, \n  col_names = rename_conditions_cols, \n  cols_to_sep = conditions_cols_to_sep\n)) %&gt;%\n  mutate(\n    moku = if_else(moku == \"Ko‘olau\", \"Koʻolau\", moku),\n    moku_name2 = case_when(\n      moku == \"Kona\" & island == \"Hawaiʻi\" ~ \"KONA HAW\",\n      moku == \"Kāʻu\" & island == \"Hawaiʻi\" ~ \"KAU\",\n      moku == \"Puna\" & island == \"Hawaiʻi\" ~ \"PUNA HAW\",\n      moku == \"Hilo\" & island == \"Hawaiʻi\" ~ \"HILO\",\n      moku == \"Hāmākua\" & island == \"Hawaiʻi\" ~ \"HAMAKUA\",\n      moku == \"Kohala\" & island == \"Hawaiʻi\" ~ \"KOHALA\",\n      moku == \"Waiʻanae\" & island == \"Oʻahu\" ~ \"WAIANAE\",\n      moku == \"ʻEwa\" & island == \"Oʻahu\" ~ \"EWA\",\n      moku == \"Kona\" & island == \"Oʻahu\" ~ \"KONA OAH\",\n      moku == \"Koʻolaupoko\" & island == \"Oʻahu\" ~ \"KOOLAUPOKO\",\n      moku == \"Koʻolauloa\" & island == \"Oʻahu\" ~ \"KOOLAULOA\",\n      moku == \"Waialua\" & island == \"Oʻahu\" ~ \"WAIALUA\",\n      moku == \"Mana\" & island == \"Kauaʻi\" ~ \"MANA\",\n      moku == \"Kona\" & island == \"Kauaʻi\" ~ \"KONA KAU\",\n      moku == \"Puna\" & island == \"Kauaʻi\" ~ \"PUNA KAU\",\n      moku == \"Koʻolau\" & island == \"Kauaʻi\" ~ \"KOOLAU KAU\",\n      moku == \"Haleleʻa\" & island == \"Kauaʻi\" ~ \"HALELEA\",\n      moku == \"Nāpali\" & island == \"Kauaʻi\" ~ \"NAPALI\",\n      moku == \"Kona\" & island == \"Kahoʻolawe\" ~ \"KONA KAH\",\n      moku == \"Koʻolau\" & island == \"Kahoʻolawe\" ~ \"KOOLAU KAH\",\n      moku == \"Kona\" & island == \"Lānaʻi\" ~ \"KONA LAN\",\n      moku == \"Koʻolau\" & island == \"Lānaʻi\" ~ \"KOOLAU LAN\",\n      moku == \"Kualuakoʻi\" & island == \"Molokaʻi\" ~ \"KALUAKOI\",\n      moku == \"Pālāʻau\" & island == \"Molokaʻi\" ~ \"PALAAU\",\n      moku == \"Kona\" & island == \"Molokaʻi\" ~ \"KONA MOL\",\n      moku == \"Hālawa\" & island == \"Molokaʻi\" ~ \"HALAWA\",\n      moku == \"Koʻolau\" & island == \"Molokaʻi\" ~ \"KOOLAU MOL\",\n      moku == \"Lāhainā\" & island == \"Maui\" ~ \"LAHAINA\",\n      moku == \"Kealaloloa\" & island == \"Maui\" ~ \"KEALALOLOA\",\n      moku == \"Kula\" & island == \"Maui\" ~ \"KULA\",\n      moku == \"Honuaʻula\" & island == \"Maui\" ~ \"HONUAULA\",\n      moku == \"Kahikinui\" & island == \"Maui\" ~ \"KAHIKINUI\",\n      moku == \"Kaupo\" & island == \"Maui\" ~ \"KAUPO\",\n      moku == \"Kīpahulu\" & island == \"Maui\" ~ \"KIPAHULU\",\n      moku == \"Hāna\" & island == \"Maui\" ~ \"HANA\",\n      moku == \"Koʻolau\" & island == \"Maui\" ~ \"KOOLAU MAU\",\n      moku == \"Hāmākualoa\" & island == \"Maui\" ~ \"HAMAKUALOA\",\n      moku == \"Hāmākuapoko\" & island == \"Maui\" ~ \"HAMAKUAPOKO\",\n      moku == \"Wailuku\" & island == \"Maui\" ~ \"WAILUKU\",\n      moku == \"Kāʻanapali\" & island == \"Maui\" ~ \"KAANAPALI\"\n    )\n  ) %&gt;% \n  relocate(moku_name2, .after = moku)\n\npaged_table(tidied_mhi_conditions_df)"
  },
  {
    "objectID": "data-processing.html#data-exportation-1",
    "href": "data-processing.html#data-exportation-1",
    "title": "Data Processing",
    "section": "Data Exportation",
    "text": "Data Exportation\n\nExporting Processed Data\n\n\nExport Processed Data\ntidied_dfs_list &lt;- list(\n  list(df = tidied_mhi_conditions_df, desc_name = \"mhi-conditions\")\n#   list(df = tidied_oahu_marine_extents_df, desc_name = \"oahu-marine-extents\")\n)\n\nmap(tidied_dfs_list, ~export_tidied_dfs_to_csv(.x$df, .x$desc_name))\n\n\n\n\nGenerating Data Dictionaries\n\n\nMHI Marine Condition Accounts Data Dictionary\ntidied_mhi_conditions_df %&gt;%\n  make_xray() %&gt;% \n  view_xray()\n\n\n\n\nExpand/collapse all"
  }
]